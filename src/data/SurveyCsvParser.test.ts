import { describe, expect, it } from "vitest";
import { readFileSync } from "node:fs";
import { SurveyCsvParser, type SurveyRecord } from "./SurveyCsvParser";

const csvContent = readFileSync(
  new URL("./2025.csv", import.meta.url),
  "utf-8"
);

describe("SurveyCsvParser", () => {
  const parser = SurveyCsvParser.fromCsv(csvContent);

  it("reads a specific record correctly", () => {
    const record = parser.findByResponseId("29");

    const expectedRecord: SurveyRecord = {
      responseId: "29",
      dateSubmitted: "1980-01-01 00:00:00",
      lastPage: "4",
      startLanguage: "en",
      seed: "1941877023",
      ageGroup: "29 - 44",
      professionalExperienceYears: "11 – 20 years",
      continent: "Europe",
      countryOfResidence: "Germany",
      countryOfResidenceAlt1: "",
      countryOfResidenceAlt2: "",
      countryOfResidenceAlt3: "",
      countryOfResidenceAlt4: "",
      role: "Requirements Engineer / Business Analyst / Product Owner",
      roleOther: "",
      organizationType:
        "Industry - Medium-sized enterprise (50 – 249 employees)",
      primaryApplicationDomain: "Healthcare and Medical Technology",
      primaryApplicationDomainOther: "",
      heardOfDigitalSustainabilityDefinition: "Yes",
      discussionFrequency: "Never",
      discussionFrequencyOther: "",
      participatedInTraining: "No",
      trainingNotAware: "Yes",
      trainingNoOrganizationOffer: "Yes",
      trainingNoOpportunity: "Yes",
      trainingNoNeed: "No",
      trainingTooExpensive: "No",
      trainingOtherReason: "",
      trainingCount: "",
      trainingPrivateCapacity: "",
      trainingDescription: "",
      trainingSatisfaction: "",
      notMoreTrainingNotAware: "N/A",
      notMoreTrainingNoOrganization: "N/A",
      notMoreTrainingNoOpportunity: "N/A",
      notMoreTrainingNoNeed: "N/A",
      notMoreTrainingTooExpensive: "N/A",
      notMoreTrainingOther: "",
      organizationHasDigitalSustainabilityGoals: "No",
      organizationHasSustainabilityTeam: "No",
      organizationIncorporatesSustainablePractices: "No",
      organizationDepartmentCoordination: "",
      considerEnvironmental: "N/A",
      considerSocial: "N/A",
      considerIndividual: "N/A",
      considerEconomic: "N/A",
      considerTechnical: "N/A",
      considerOther: "",
      organizationReportsOnSustainability: "No",
      organizationOffersTraining: "No",
      organizationTrainingDescription: "",
      orgNoTrainingLackAwareness: "Yes",
      orgNoTrainingLackUnderstanding: "No",
      orgNoTrainingNoDemand: "No",
      orgNoTrainingLimitedBudget: "Yes",
      orgNoTrainingNotPriority: "Yes",
      orgNoTrainingNotSure: "No",
      orgNoTrainingOther: "",
      customerRequirementFrequency: "Never",
      customerNotRequestingReasons: "",
      personIncorporatesSustainability: "No",
      driveOrganizationalPolicies: "N/A",
      drivePersonalBeliefs: "N/A",
      driveClientRequirements: "N/A",
      driveUserRequirements: "N/A",
      driveLegalRequirements: "N/A",
      driveOther: "",
      roleConsiderEnvironmental: "N/A",
      roleConsiderSocial: "N/A",
      roleConsiderIndividual: "N/A",
      roleConsiderEconomic: "N/A",
      roleConsiderTechnical: "N/A",
      roleConsiderOther: "",
      usesTools: "",
      toolsDescription: "",
      hindranceLackInterest: "No",
      hindranceLackKnowledge: "No",
      hindranceLimitedResources: "Yes",
      hindranceFinancialConstraints: "No",
      hindranceInsufficientTime: "No",
      hindranceLackSupport: "No",
      hindranceComplexity: "No",
      hindranceCulturalBarriers: "No",
      hindranceStakeholderResistance: "No",
      hindranceOther: "",
      lackKnowledgeEnvironmental: "Yes",
      lackKnowledgeSocial: "Yes",
      lackKnowledgeIndividual: "Yes",
      lackKnowledgeEconomic: "Yes",
      lackKnowledgeTechnical: "Yes",
      lackKnowledgeNone: "No",
      lackKnowledgeOther: "",
      supportNeedTheoretical: "Yes",
      supportNeedTutorials: "Yes",
      supportNeedCurricula: "No",
      supportNeedPractical: "Yes",
      supportNeedCaseStudies: "No",
      supportNeedStructures: "No",
      supportNeedTools: "Yes",
      supportNeedNone: "No",
      supportNeedOther: "",
    };

    expect(record).toEqual(expectedRecord);
  });
});
